{"version":3,"sources":["lib/SirenLink.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;yBAAsB,WAAW;;;;sBACd,UAAU;;;;IAEvB,SAAS;WAAT,SAAS;;AAIH,UAJN,SAAS,CAIF,IAAI,EAAE,IAAI,EAAE;wBAJnB,SAAS;;AAKb,6BALI,SAAS,6CAKP,EAAC,IAAI,EAAE,IAAI,uBAAU,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAC,EAAE;EACnD;;;;;;;;cANI,SAAS;;SAaR,kBAAG;AACR,UAAO,oBAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC7B;;;QAfI,SAAS;GAAS,uBAAU,MAAM,CAAC;AACxC,KAAI,EAAE,IAAI,uBAAU,GAAG,EAAE;AACzB,KAAI,EAAE,IAAI;CACV,CAAC;;qBAea,SAAS","file":"lib/SirenLink.js","sourcesContent":["import Immutable from 'immutable';\r\nimport Client from './Client';\r\n\r\nclass SirenLink extends Immutable.Record({\r\n\trels: new Immutable.Set(),\r\n\thref: null\r\n}) {\r\n\tconstructor(rels, href) {\r\n\t\tsuper({rels: new Immutable.Set(rels), href: href});\r\n\t}\r\n\r\n\t/**\r\n\t * Perhaps an HTTP Get against the href represented by this Link.\r\n\t *\r\n\t * @return {superagent-promise} superagent request as a with a promise wrapper\r\n\t */\r\n\tfollow() {\r\n\t\treturn Client.get(this.href);\r\n\t}\r\n}\r\n\r\nexport default SirenLink;\r\n"],"sourceRoot":"/source/"}