{"version":3,"sources":["lib/Siren.js"],"names":[],"mappings":"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","file":"lib/Siren.js","sourcesContent":["import Promise from 'bluebird';\nimport Immutable from 'immutable';\nimport LinkedSubEntity from './LinkedSubEntity';\nimport SirenLink from './SirenLink';\nimport SirenAction from './SirenAction';\nimport _ from 'lodash';\nimport Client from './Client';\nimport SirenHelpers from './SirenHelpers';\n\nClient.addParser('application/vnd.siren+json', (text) => Siren.fromJson(JSON.parse(text)));\n\nClient.addHeader('Cache-Control', 'no-cache,no-store,must-revalidate,max-age=-1');\nClient.addHeader('Accept', 'application/vnd.siren+json');\nClient.addHeader('Content-Type', 'application/json');\n\nvar client = new Client();\n\nclass Siren extends Immutable.Record({\n\tclasses: Immutable.Set(),\n\tproperties: Immutable.Map(),\n\tentities: Immutable.Map(),\n\tactions: Immutable.Map(),\n\tlinks: Immutable.Map()\n}) {\n\tconstructor(args) {\n\t\tif (!args && Siren.empty) {\n\t\t\treturn Siren.empty;\n\t\t}\n\t\telse {\n\t\t\tsuper(args);\n\t\t}\n\t}\n\n\t/**\n\t * Finds the @see {@link SirenAction} referenced by the provided rel.\n\t *\n\t * @param  {String} name The name of the action to find.\n\t * @return {SirenAction} SirenAction matching the requested name.  null if none is found.\n\t */\n\tfindActionByName(name) {\n\t\treturn this.actions.get(name) || null;\n\t}\n\n\t/**\n\t * Finds the @See {@link SirenLink} referenced by the provided rel.\n\t *\n\t * @param  {String} rel The relation to this Siren entity for the requested link.\n\t * @return {SirenLink}     SirenLink matching the requested rel.  null if none is found.\n\t */\n\tfindLinkByRel(rel) {\n\t\treturn this.links.get(rel) || null;\n\t}\n\n\t/**\n\t * Finds the @See {@link EmbeddedSubEntity}|{@link LinkedSubEntity} referenced by the provided rel.\n\t *\n\t * @param  {String} rel The relation to this Siren entity for the requested sub-entity.\n\t * @return {EmbeddedSubEntity|LinkedSubEntity}     The sub-entity matching the requested rel.  null if none is found.\n\t */\n\tfindEntityByRel(rel) {\n\t\t//TODO: this needs to be plural\n\t\treturn this.entities.get(rel) || null;\n\t}\n\n\t/**\n\t * Returns the sub-entities on this Siren object which are embedded sub-entities.\n\t *\n\t * @param  {String} [rel=null] Optional rel which restricts the matching embedded entities to those with this rel.\n\t * @return {Immutable.Set}     Set of embedded sub-entities which match the optional provided rel.\n\t */\n\tembeddedEntities(rel = null) {\n\t\tvar entities = this.entities\n\t\t\t.filter(item => item instanceof EmbeddedSubEntity);\n\n\t\tif (rel) {\n\t\t\tentities = entities.filter((item, key) => key == rel);\n\t\t}\n\n\t\treturn entities.toSet();\n\t}\n\n\t/**\n\t * Returns the sub-entities on the Siren object which are linked sub-entities.\n\t *\n\t * @param  {String} [rel=null] Optional rel which restricts the matching linked entities to those with this rel.\n\t * @return {Immutable.Set}     Set of linked sub-entities which match the optional provided rel.\n\t */\n\tlinkedEntities(rel = null) {\n\t\tvar entities = this.entities\n\t\t\t.filter(item => item instanceof LinkedSubEntity);\n\n\t\tif (rel) {\n\t\t\tentities = entities.filter((item, key) => key == rel);\n\t\t}\n\n\t\treturn entities.toSet();\n\t}\n\n\t/**\n\t * Returns the self link for this entity\n\t *\n\t * @return {SirenLink} link represented by the self rel, null if no self link is found.\n\t */\n\tget selfLink() {\n\t\treturn this.findLinkByRel('self');\n\t}\n\n\t//TODO: add a validate method and use it while parsing\n\t/**\n\t * Parses a JSON representation of a Siren entity\n\t * and returns the Siren representation.\n\t * @param {Object} [obj] The JSON object to be parsed as Siren\n\t * @return {Siren} Parsed Siren entity\n\t */\n\tstatic fromJson(obj) {\n\t\treturn Siren.empty.withMutations(map => {\n\t\t\tmap.set('classes', map.classes.union(obj.class ? Immutable.fromJS(obj.class) : new Immutable.List()));\n\n\t\t\tfor (var key in obj.properties) {\n\t\t\t\tmap.set('properties', map.properties.set(key, obj.properties[key]));\n\t\t\t}\n\n\t\t\tmap.set('links',\n\t\t\t\tnew Immutable.Map(_.flatten(\n\t\t\t\t\t_.map(obj.links || [], (item) => new SirenLink(item.rel, item.href))\n\t\t\t\t\t.map(link => _.map(link.rels.toJS(), rel => [rel, link]))\n\t\t\t\t))\n\t\t\t);\n\n\t\t\tmap.set('actions',\n\t\t\t\tnew Immutable.Map(\n\t\t\t\t\t_.map(obj.actions || [], (item) => SirenAction.fromJson(item))\n\t\t\t\t\t.map(action => [action.name, action])\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tmap.set('entities',\n\t\t\t\tnew Immutable.Map(_.flatten(\n\t\t\t\t\t_.map(obj.entities || [], (item) => item.href ? LinkedSubEntity.fromJson(item) : EmbeddedSubEntity.fromJson(item))\n\t\t\t\t\t.map(e => _.map(e.rels.toJS(), rel => [rel, e]))\n\t\t\t\t))\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Returns an empty siren representation.  This Siren entity\n\t * contains no afforances.\n\t * @return {Siren} Empty siren structure\n\t */\n\tstatic get empty() {\n\t\treturn emptySiren;\n\t}\n\n\t/**\n\t * Returns a Superagent Promise instance which will perform an HTTP Get against\n\t * the provided href returning the response as a SuperAgent response.\n\t * If the response is Siren ('application/vnd.siren+json'),\n\t * then the body should be a Siren instance.\n\t *\n\t * @param {String} href The URL to perform an HTTP get against\n\t * @return {superagent-promise} Superagent Promise Object\n\t */\n\tstatic get(href) {\n\t\treturn Client.get(href);\n\t}\n}\n\nvar emptySiren = new Siren();\n\n/**\n * Entity which has been embedded within a parent Siren instance.\n *\n * @param {Array} options.rels: new Immutable.Set() array of strings to identify how this\n *                              embedded entity is related to it's parent.\n * @param {Object} options.entity: Siren.empty embedded entity instance\n */\nclass EmbeddedSubEntity extends Immutable.Record({\n\trels: new Immutable.Set(),\n\tentity: Siren.empty\n}) {\n\t/**\n\t * Parses the provided JSON representation of the Siren sub entity\n\t * into an instance of an EmbeddedSubEntity.\n\t *\n\t * @param  {Object} json           The JSON representation of a siren embedded sub entity.\n\t * @return {EmbeddedSubEntity}     The representation of the parsed JSON.\n\t */\n\tstatic fromJson(json) {\n\t\tif (!json.rel || !_.isArray(json.rel) || json.rel.length === 0) {\n\t\t\tthrow new Error('A rel array is required to parse an embedded sub entity');\n\t\t}\n\n\t\treturn EmbeddedSubEntity.empty.withMutations(map => {\n\t\t\tmap.set('rels', new Immutable.Set(json.rel));\n\t\t\tmap.set('entity', Siren.fromJson(json));\n\t\t});\n\t}\n\n\t/**\n\t * Returns the default empty instance of an EmbeddedSubEntity.\n\t *\n\t * @return {EmbeddedSubEntity} default dembedded sub entity.\n\t */\n\tstatic get empty() {\n\t\treturn emptyEmbedded;\n\t}\n}\n\nvar emptyEmbedded = new EmbeddedSubEntity();\n\nSiren.Link = SirenLink;\nSiren.Action = SirenAction;\nSiren.LinkedSubEntity = LinkedSubEntity;\nSiren.EmbeddedSubEntity = EmbeddedSubEntity;\nSiren.Client = Client;\n\nSiren.Helper = SirenHelpers;\n\nmodule.exports = Siren;\n"],"sourceRoot":"/source/"}