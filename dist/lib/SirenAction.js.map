{"version":3,"sources":["lib/SirenAction.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;sBAAc,QAAQ;;;;yBACA,WAAW;;;;2BACT,eAAe;;;;sBACpB,UAAU;;;;;;;;;;;;;;;;IAavB,WAAW;WAAX,WAAW;;UAAX,WAAW;wBAAX,WAAW;;6BAAX,WAAW;;;cAAX,WAAW;;;;;;;;;SAcT,iBAAC,IAAI,EAAE;AACb,OAAI,GAAG,GAAG,oBAAO,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAChD,OAAI,OAAO,GAAG,EAAG,CAAC;;AAElB,OAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,CAAC;WAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK;IAAA,CAAC,CAAC;AACpD,0BAAU,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;WAAK,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK;IAAA,CAAC,CAAC;;AAErE,OAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;AAC1B,OAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAChB,MACI;AACJ,OAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf;;AAED,UAAO,GAAG,CAAC;GACX;;;;;;;;;;;SASc,kBAAC,IAAI,EAAE;AACrB,OAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACf,UAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACnD;;AAED,UAAO,KAAK,CAAC,aAAa,CAAC,UAAA,GAAG,EAAI;AACjC,OAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACvC,OAAG,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1C,OAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;AAC7C,OAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACvC,OAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACvC,OAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,uBAAU,GAAG,CAAC,oBAAE,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,EAAE,UAAA,CAAC;YAAI,yBAAY,QAAQ,CAAC,CAAC,CAAC;KAAA,CAAC,CAAC,GAAG,CAAC,UAAA,EAAE;YAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;KAAA,CAAC,CAAC,CAAC,CAAC;IACtH,CAAC,CAAC;GACH;;;;;;;;;;;OASe,eAAG;AAClB,UAAO,KAAK,CAAC;GACb;;;QA9DI,WAAW;GAAS,uBAAU,MAAM,CAAC;AAC1C,KAAI,EAAE,IAAI;AACV,MAAK,EAAE,IAAI;AACX,OAAM,EAAE,KAAK;AACb,KAAI,EAAE,IAAI;AACV,KAAI,EAAE,mCAAmC;AACzC,OAAM,EAAE,IAAI,uBAAU,GAAG,EAAE;CAC3B,CAAC;;AA0DF,IAAI,KAAK,GAAG,IAAI,WAAW,EAAE,CAAC;;qBAEf,WAAW","file":"lib/SirenAction.js","sourcesContent":["import _ from 'lodash';\r\nimport Immutable from 'immutable';\r\nimport ActionField from './ActionField';\r\nimport Client from './Client';\r\n\r\n/**\r\n * Representation of a Siren action, which allows a state within a Siren Hypermedia API\r\n * to transition to a new state.\r\n *\r\n * @param {String} options.name:   null                                [description]\r\n * @param {String} options.title:  null                                [description]\r\n * @param {String} options.method: 'GET'                               [description]\r\n * @param {String} options.href:   null                                [description]\r\n * @param {String} options.type:   'application/x-www-form-urlencoded' [description]\r\n * @param {Immutable.Map} options.fields: new Immutable.Map()          [description]\r\n */\r\nclass SirenAction extends Immutable.Record({\r\n\tname: null,\r\n\ttitle: null,\r\n\tmethod: 'GET',\r\n\thref: null,\r\n\ttype: 'application/x-www-form-urlencoded',\r\n\tfields: new Immutable.Map()\r\n}) {\r\n\t/**\r\n\t * Performs the action specified by this Action.\r\n\t *\r\n\t * @param  {Object} data Data to be sent as part of this action\r\n\t * @return {superagent-promise} superagent promise representing the HTTP request to perform this action\r\n\t */\r\n\tperform(data) {\r\n\t\tvar req = Client.action(this.method, this.href);\r\n\t\tvar payload = { };\r\n\r\n\t\tthis.fields.forEach(f => payload[f.name] = f.value);\r\n\t\tImmutable.fromJS(data).forEach((value, key) => payload[key] = value);\r\n\r\n\t\tif (this.method === 'get') {\r\n\t\t\treq.query(data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treq.send(data);\r\n\t\t}\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a SirenAction instance based on the provided\r\n\t * JSON object structure.\r\n\t *\r\n\t * @param  {Object} json Object which matches the Siren JSON structure.\r\n\t * @return {SirenAction}      Result of parsing the provided JSON object.\r\n\t */\r\n\tstatic fromJson(json) {\r\n\t\tif (!json.name) {\r\n\t\t\tthrow new Error('\"name\" is requires on an action');\r\n\t\t}\r\n\r\n\t\treturn empty.withMutations(map => {\r\n\t\t\tmap.set('name', json.name || map.name);\r\n\t\t\tmap.set('title', json.title || map.title);\r\n\t\t\tmap.set('method', json.method || map.method);\r\n\t\t\tmap.set('href', json.href || map.href);\r\n\t\t\tmap.set('type', json.type || map.type);\r\n\t\t\tmap.set('fields', new Immutable.Map(_.map(json.fields || [], f => ActionField.fromJson(f)).map(af => [af.name, af])));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Default state for a SirenAction.  This has the defaults set and nothing\r\n\t * else.\r\n\t *\r\n\t * @return {SirenAction} Siren Action which is created as a result of parsing\r\n\t *                             the provided JSON.\r\n\t */\r\n\tstatic get empty() {\r\n\t\treturn empty;\r\n\t}\r\n}\r\n\r\nvar empty = new SirenAction();\r\n\r\nexport default SirenAction;\r\n"],"sourceRoot":"/source/"}