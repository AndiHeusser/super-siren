{"version":3,"sources":["lib/Client.js"],"names":[],"mappings":";;;;;;;;;;;;;;yBAAsB,WAAW;;;;0BACV,YAAY;;;;AAEnC,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,mCAAqB,CAAC;;AAEjE,IAAI,aAAa,GAAG,IAAI,uBAAU,GAAG,EAAE,CAAC;;;;;;;IAMlC,MAAM;UAAN,MAAM;wBAAN,MAAM;;;cAAN,MAAM;;;;;;;;;SAOD,aAAC,IAAI,EAAE;AAChB,OAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5B,aAAU,CAAC,GAAG,CAAC,CAAC;;AAEhB,UAAO,GAAG,CAAC;GACX;;;SAES,aAAC,IAAI,EAAE;AAChB,OAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5B,aAAU,CAAC,GAAG,CAAC,CAAC;;AAEhB,UAAO,GAAG,CAAC;GACX;;;SAEU,cAAC,IAAI,EAAE;AACjB,OAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7B,aAAU,CAAC,GAAG,CAAC,CAAC;;AAEhB,UAAO,GAAG,CAAC;GACX;;;SAES,aAAC,IAAI,EAAE;AAChB,OAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5B,aAAU,CAAC,GAAG,CAAC,CAAC;;AAEhB,UAAO,GAAG,CAAC;GACX;;;SAEY,gBAAC,MAAM,EAAE,IAAI,EAAE;AAC3B,SAAM,GAAG,CAAC,MAAM,IAAI,KAAK,CAAA,CAAE,OAAO,EAAE,CAAC;;AAErC,OAAI,MAAM,KAAK,QAAQ,EAAE;AACxB,UAAM,GAAG,KAAK,CAAC;IACf;;AAED,OAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;AAChC,aAAU,CAAC,GAAG,CAAC,CAAC;;AAEhB,UAAO,GAAG,CAAC;GACX;;;;;;;;;;;;;SAWe,mBAAC,WAAW,EAAE,aAAa,EAAE;AAC5C,2BAAW,KAAK,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC;GAC9C;;;;;;;;;;;;;;;;;;SAmBe,mBAAC,MAAM,EAAE,KAAK,EAAE;AAC/B,gBAAa,GAAG,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;GACjD;;;;;;;;;;SAQkB,sBAAC,MAAM,EAAE;AAC3B,gBAAa,GAAG,aAAa,UAAO,CAAC,MAAM,CAAC,CAAC;GAC7C;;;OAvBuB,eAAG;AAC1B,UAAO,aAAa,CAAC;GACrB;;;QArEI,MAAM;;;AA6FZ,SAAS,UAAU,CAAC,GAAG,EAAE;AACxB,cAAa,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG,EAAK;AACrC,KAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;EACpB,CAAC,CAAC;CACH;;qBAEc,MAAM","file":"lib/Client.js","sourcesContent":["import Immutable from 'immutable';\r\nimport superagent from 'superagent';\r\n\r\nvar request = require('superagent-promise')(superagent, Promise);\r\n\r\nvar globalHeaders = new Immutable.Map();\r\n\r\n/**\r\n * HTTP client used by the Super-Siren library.  Library utilized [superaget](https://github.com/visionmedia/superagent)\r\n * for all requests.\r\n */\r\nclass Client {\r\n\t/**\r\n\t * Creates a superagent HTTP get operation\r\n\t *\r\n\t * @param {String} href The URL to perform an HTTP get against.\r\n\t * @return {superagent-promise} superagent get request\r\n\t */\r\n\tstatic get(href) {\r\n\t\tvar req = request.get(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic put(href) {\r\n\t\tvar req = request.put(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic post(href) {\r\n\t\tvar req = request.post(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic del(href) {\r\n\t\tvar req = request.del(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic action(method, href) {\r\n\t\tmethod = (method || 'get').toLower();\r\n\r\n\t\tif (method === 'delete') {\r\n\t\t\tmethod = 'del';\r\n\t\t}\r\n\r\n\t\tvar req = request[method](href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a content type parser with all client instances.\r\n\t *\r\n\t * @param {String} contentType     content-type which should be parsed with the provided function\r\n\t *                                 whenever a response is received with this content type.\r\n\t * @param {Function} parseFunction Function to call in order to return response body when response\r\n\t *                                 is encoded with the provided contentType.\r\n\t * @returns {undefined}\r\n\t */\r\n\tstatic addParser(contentType, parseFunction) {\r\n\t\tsuperagent.parse[contentType] = parseFunction;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Map of current global headers that are added\r\n\t * for all clients.\r\n\t *\r\n\t * @return {Immutable.Map} Immutable map of all currently registered headers\r\n\t */\r\n\tstatic get globalHeaders() {\r\n\t\treturn globalHeaders;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a global header to be used by all client instances.\r\n\t *\r\n\t * @param {String} header The header attribute to set\r\n\t * @param {String} value The header value to set\r\n\t * @returns {undefined}\r\n\t */\r\n\tstatic addHeader(header, value) {\r\n\t\tglobalHeaders = globalHeaders.set(header, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Remves a previously registered global header.\r\n\t *\r\n\t * @param  {String} header The header attribute to remove\r\n\t * @returns {undefined}\r\n\t */\r\n\tstatic removeHeader(header) {\r\n\t\tglobalHeaders = globalHeaders.delete(header);\r\n\t}\r\n}\r\n\r\nfunction addHeaders(req) {\r\n\tglobalHeaders.forEach((value, key) => {\r\n\t\treq.set(key, value);\r\n\t});\r\n}\r\n\r\nexport default Client;\r\n"],"sourceRoot":"/source/"}