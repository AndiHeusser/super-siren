{"version":3,"sources":["index.js","ActionField.js","Client.js","LinkedSubEntity.js","Siren.js","SirenAction.js","SirenLink.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Siren from './lib/Siren';\n\nexport default Siren;\n","import Immutable from 'immutable';\r\n\r\n/**\r\n * Describes a field on an Action and how this field\r\n * should be sent to Siren API as part of that Action.\r\n *\r\n * @param {String} options.name:  ''     [description]\r\n * @param {String} options.title: null   [description]\r\n * @param {String} options.type:  'text' [description]\r\n * @param {Object} options.value: null   Default value to be sent on the field\r\n */\r\nclass ActionField extends Immutable.Record({\r\n\tname: '',\r\n\ttitle: null,\r\n\ttype: 'text',\r\n\tvalue: null\r\n}) {\r\n\r\n\t/**\r\n\t * Parses a JSON representation of a field.\r\n\t *\r\n\t * @param {Object} json The Object representation of the ActionField.\r\n\t * @return {ActionField} parsed structure which represents a field on an action.\r\n\t */\r\n\tstatic fromJson(json) {\r\n\t\tif (!json.name) {\r\n\t\t\tthrow new Error('name is required on an action field');\r\n\t\t}\r\n\r\n\t\treturn empty.withMutations(map => {\r\n\t\t\tmap.set('name', json.name || map.name);\r\n\t\t\tmap.set('title', json.title || map.title);\r\n\t\t\tmap.set('type', json.type || map.type);\r\n\t\t\tmap.set('value', json.value || map.value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Default empty state for a field.\r\n\t *\r\n\t * @return {ActionField} Default state\r\n\t */\r\n\tstatic get empty() {\r\n\t\treturn empty;\r\n\t}\r\n}\r\n\r\nvar empty = new ActionField();\r\n\r\nexport default ActionField;\r\n","import Immutable from 'immutable';\r\nimport superagent from 'superagent';\r\n\r\nvar request = require('superagent-promise')(superagent, Promise);\r\n\r\nvar globalHeaders = new Immutable.Map();\r\n\r\n/**\r\n * HTTP client used by the Super-Siren library.  Library utilized [superaget](https://github.com/visionmedia/superagent)\r\n * for all requests.\r\n */\r\nclass Client {\r\n\t/**\r\n\t * Creates a superagent HTTP get operation\r\n\t *\r\n\t * @param {String} href The URL to perform an HTTP get against.\r\n\t * @return {superagent-promise} superagent get request\r\n\t */\r\n\tstatic get(href) {\r\n\t\tvar req = request.get(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic put(href) {\r\n\t\tvar req = request.put(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic post(href) {\r\n\t\tvar req = request.post(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic del(href) {\r\n\t\tvar req = request.del(href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\tstatic action(method, href) {\r\n\t\tmethod = (method || 'get').toLower();\r\n\r\n\t\tif (method === 'delete') {\r\n\t\t\tmethod = 'del';\r\n\t\t}\r\n\r\n\t\tvar req = request[method](href);\r\n\t\taddHeaders(req);\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a content type parser with all client instances.\r\n\t *\r\n\t * @param {String} contentType     content-type which should be parsed with the provided function\r\n\t *                                 whenever a response is received with this content type.\r\n\t * @param {Function} parseFunction Function to call in order to return response body when response\r\n\t *                                 is encoded with the provided contentType.\r\n\t * @returns {undefined}\r\n\t */\r\n\tstatic addParser(contentType, parseFunction) {\r\n\t\tsuperagent.parse[contentType] = parseFunction;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Map of current global headers that are added\r\n\t * for all clients.\r\n\t *\r\n\t * @return {Immutable.Map} Immutable map of all currently registered headers\r\n\t */\r\n\tstatic get globalHeaders() {\r\n\t\treturn globalHeaders;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a global header to be used by all client instances.\r\n\t *\r\n\t * @param {String} header The header attribute to set\r\n\t * @param {String} value The header value to set\r\n\t * @returns {undefined}\r\n\t */\r\n\tstatic addHeader(header, value) {\r\n\t\tglobalHeaders = globalHeaders.set(header, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Remves a previously registered global header.\r\n\t *\r\n\t * @param  {String} header The header attribute to remove\r\n\t * @returns {undefined}\r\n\t */\r\n\tstatic removeHeader(header) {\r\n\t\tglobalHeaders = globalHeaders.delete(header);\r\n\t}\r\n}\r\n\r\nfunction addHeaders(req) {\r\n\tglobalHeaders.forEach((value, key) => {\r\n\t\treq.set(key, value);\r\n\t});\r\n}\r\n\r\nexport default Client;\r\n","import Immutable from 'immutable';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * Represents an sub-entity of an entity which is represented\r\n * as a URL to the actual entity instance.\r\n */\r\nclass LinkedSubEntity extends Immutable.Record({\r\n\trels: new Immutable.Set(),\r\n\tclasses: new Immutable.Set(),\r\n\thref: null\r\n}) {\r\n\r\n\t/**\r\n\t * Parses the provided json instance and returns\r\n\t * the LinkedSubEntity representation of that json\r\n\t *\r\n\t * @param  {Object} json Object representation of the linked sub-entity\r\n\t * @return {LinkedSubEntity}      Parsed representation of the linked sub-entity.\r\n\t */\r\n\tstatic fromJson(json) {\r\n\t\tif (!json.rel || !_.isArray(json.rel) || json.rel.length === 0) {\r\n\t\t\tthrow new Error('A rel array with at least one rel is required to create a linked sub entity');\r\n\t\t}\r\n\r\n\t\tif (!json.href) {\r\n\t\t\tthrow new Error('a href is required for a linked sub entity');\r\n\t\t}\r\n\r\n\t\treturn empty.withMutations(map => {\r\n\t\t\tmap.set('rels', new Immutable.Set(json.rel));\r\n\t\t\tmap.set('href', json.href || map.href);\r\n\t\t\tmap.set('classes', new Immutable.Set(json.class || []));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Default empty instance of a LinkedSubEntity\r\n\t * @return {LinkedSubEntity} Default empty state\r\n\t */\r\n\tstatic get empty() {\r\n\t\treturn empty;\r\n\t}\r\n}\r\n\r\nvar empty = new LinkedSubEntity();\r\n\r\nexport default LinkedSubEntity;\r\n","import Promise from 'bluebird';\nimport Immutable from 'immutable';\nimport LinkedSubEntity from './LinkedSubEntity';\nimport SirenLink from './SirenLink';\nimport SirenAction from './SirenAction';\nimport _ from 'lodash';\nimport Client from './Client';\n\nClient.addParser('application/vnd.siren+json', res => Siren.fromJson(JSON.parse(res)));\n\nClient.addHeader('Cache-Control', 'no-cache,no-store,must-revalidate,max-age=-1');\nClient.addHeader('Accept', 'application/vnd.siren+json');\nClient.addHeader('Content-Type', 'application/json');\n\nvar client = new Client();\n\nclass Siren extends Immutable.Record({\n\tclasses: Immutable.Set(),\n\tproperties: Immutable.Map(),\n\tentities: Immutable.Map(),\n\tactions: Immutable.Map(),\n\tlinks: Immutable.Map()\n}) {\n\tconstructor(args) {\n\t\tif (!args && Siren.empty) {\n\t\t\treturn Siren.empty;\n\t\t}\n\t\telse {\n\t\t\tsuper(args);\n\t\t}\n\t}\n\n\t/**\n\t * Finds the @see {@link SirenAction} referenced by the provided rel.\n\t *\n\t * @param  {String} rel The relation to this Siren entity for the requested action.\n\t * @return {SirenAction} SirenAction matching the requested rel.  null if none is found.\n\t */\n\tfindActionByRel(rel) {\n\t\treturn this.actions.get(rel) || null;\n\t}\n\n\t/**\n\t * Finds the @See {@link SirenLink} referenced by the provided rel.\n\t *\n\t * @param  {String} rel The relation to this Siren entity for the requested link.\n\t * @return {SirenLink}     SirenLink matching the requested rel.  null if none is found.\n\t */\n\tfindLinkByRel(rel) {\n\t\treturn this.links.get(rel) || null;\n\t}\n\n\t/**\n\t * Finds the @See {@link EmbeddedSubEntity}|{@link LinkedSubEntity} referenced by the provided rel.\n\t *\n\t * @param  {String} rel The relation to this Siren entity for the requested sub-entity.\n\t * @return {EmbeddedSubEntity|LinkedSubEntity}     The sub-entity matching the requested rel.  null if none is found.\n\t */\n\tfindEntityByRel(rel) {\n\t\treturn this.entities.get(rel) || null;\n\t}\n\n\t//TODO: add a validate method and use it while parsing\n\t/**\n\t * Parses a JSON representation of a Siren entity\n\t * and returns the Siren representation.\n\t * @param {Object} [obj] The JSON object to be parsed as Siren\n\t * @return {Siren} Parsed Siren entity\n\t */\n\tstatic fromJson(obj) {\n\t\treturn Siren.empty.withMutations(map => {\n\t\t\tmap.set('classes', map.classes.union(obj.class ? Immutable.fromJS(obj.class) : new Immutable.List()));\n\n\t\t\tfor (var key in obj.properties) {\n\t\t\t\tmap.set('properties', map.properties.set(key, obj.properties[key]));\n\t\t\t}\n\n\t\t\tmap.set('links',\n\t\t\t\tnew Immutable.Map(_.flatten(\n\t\t\t\t\t_.map(obj.links || [], (item) => new SirenLink(item.rel, item.href))\n\t\t\t\t\t.map(link => _.map(link.rels.toJS(), rel => [rel, link]))\n\t\t\t\t))\n\t\t\t);\n\n\t\t\tmap.set('actions',\n\t\t\t\tnew Immutable.Map(\n\t\t\t\t\t_.map(obj.actions || [], (item) => SirenAction.fromJson(item))\n\t\t\t\t\t.map(action => [action.name, action])\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tmap.set('entities',\n\t\t\t\tnew Immutable.Map(_.flatten(\n\t\t\t\t\t_.map(obj.entities || [], (item) => item.href ? LinkedSubEntity.fromJson(item) : EmbeddedSubEntity.fromJson(item))\n\t\t\t\t\t.map(e => _.map(e.rels.toJS(), rel => [rel, e]))\n\t\t\t\t))\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Returns an empty siren representation.  This Siren entity\n\t * contains no afforances.\n\t * @return {Siren} Empty siren structure\n\t */\n\tstatic get empty() {\n\t\treturn emptySiren;\n\t}\n\n\t/**\n\t * Returns a Superagent Promise instance which will perform an HTTP Get against\n\t * the provided href returning the response as a SuperAgent response.\n\t * If the response is Siren ('application/vnd.siren+json'),\n\t * then the body should be a Siren instance.\n\t *\n\t * @param {String} href The URL to perform an HTTP get against\n\t * @return {superagent-promise} Superagent Promise Object\n\t */\n\tstatic get(href) {\n\t\treturn Client.get(href);\n\t}\n}\n\nvar emptySiren = new Siren();\n\n/**\n * Entity which has been embedded within a parent Siren instance.\n *\n * @param {Array} options.rels: new Immutable.Set() array of strings to identify how this\n *                              embedded entity is related to it's parent.\n * @param {Object} options.entity: Siren.empty embedded entity instance\n */\nclass EmbeddedSubEntity extends Immutable.Record({\n\trels: new Immutable.Set(),\n\tentity: Siren.empty\n}) {\n\t/**\n\t * Parses the provided JSON representation of the Siren sub entity\n\t * into an instance of an EmbeddedSubEntity.\n\t *\n\t * @param  {Object} json           The JSON representation of a siren embedded sub entity.\n\t * @return {EmbeddedSubEntity}     The representation of the parsed JSON.\n\t */\n\tstatic fromJson(json) {\n\t\tif (!json.rel || !_.isArray(json.rel) || json.rel.length === 0) {\n\t\t\tthrow new Error('A rel array is required to parse an embedded sub entity');\n\t\t}\n\n\t\treturn EmbeddedSubEntity.empty.withMutations(map => {\n\t\t\tmap.set('rels', new Immutable.Set(json.rel));\n\t\t\tmap.set('entity', Siren.fromJson(json));\n\t\t});\n\t}\n\n\t/**\n\t * Returns the default empty instance of an EmbeddedSubEntity.\n\t *\n\t * @return {EmbeddedSubEntity} default dembedded sub entity.\n\t */\n\tstatic get empty() {\n\t\treturn emptyEmbedded;\n\t}\n}\n\nvar emptyEmbedded = new EmbeddedSubEntity();\n\nSiren.Link = SirenLink;\nSiren.Action = SirenAction;\nSiren.LinkedSubEntity = LinkedSubEntity;\nSiren.EmbeddedSubEntity = EmbeddedSubEntity;\nSiren.Client = Client;\n\nmodule.exports = Siren;\n","import _ from 'lodash';\r\nimport Immutable from 'immutable';\r\nimport ActionField from './ActionField';\r\nimport Client from './Client';\r\n\r\n/**\r\n * Representation of a Siren action, which allows a state within a Siren Hypermedia API\r\n * to transition to a new state.\r\n *\r\n * @param {String} options.name:   null                                [description]\r\n * @param {String} options.title:  null                                [description]\r\n * @param {String} options.method: 'GET'                               [description]\r\n * @param {String} options.href:   null                                [description]\r\n * @param {String} options.type:   'application/x-www-form-urlencoded' [description]\r\n * @param {Immutable.Map} options.fields: new Immutable.Map()          [description]\r\n */\r\nclass SirenAction extends Immutable.Record({\r\n\tname: null,\r\n\ttitle: null,\r\n\tmethod: 'GET',\r\n\thref: null,\r\n\ttype: 'application/x-www-form-urlencoded',\r\n\tfields: new Immutable.Map()\r\n}) {\r\n\t/**\r\n\t * Performs the action specified by this Action.\r\n\t *\r\n\t * @param  {Object} data Data to be sent as part of this action\r\n\t * @return {superagent-promise} superagent promise representing the HTTP request to perform this action\r\n\t */\r\n\tperform(data) {\r\n\t\tvar req = Client.action(this.method, this.href);\r\n\t\tvar payload = { };\r\n\r\n\t\tthis.fields.forEach(f => payload[f.name] = f.value);\r\n\t\tImmutable.fromJS(data).forEach((value, key) => payload[key] = value);\r\n\r\n\t\tif (this.method === 'get') {\r\n\t\t\treq.query(data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treq.send(data);\r\n\t\t}\r\n\r\n\t\treturn req;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a SirenAction instance based on the provided\r\n\t * JSON object structure.\r\n\t *\r\n\t * @param  {Object} json Object which matches the Siren JSON structure.\r\n\t * @return {SirenAction}      Result of parsing the provided JSON object.\r\n\t */\r\n\tstatic fromJson(json) {\r\n\t\tif (!json.name) {\r\n\t\t\tthrow new Error('\"name\" is requires on an action');\r\n\t\t}\r\n\r\n\t\treturn empty.withMutations(map => {\r\n\t\t\tmap.set('name', json.name || map.name);\r\n\t\t\tmap.set('title', json.title || map.title);\r\n\t\t\tmap.set('method', json.method || map.method);\r\n\t\t\tmap.set('href', json.href || map.href);\r\n\t\t\tmap.set('type', json.type || map.type);\r\n\t\t\tmap.set('fields', new Immutable.Map(_.map(json.fields || [], f => ActionField.fromJson(f)).map(af => [af.name, af])));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Default state for a SirenAction.  This has the defaults set and nothing\r\n\t * else.\r\n\t *\r\n\t * @return {SirenAction} Siren Action which is created as a result of parsing\r\n\t *                             the provided JSON.\r\n\t */\r\n\tstatic get empty() {\r\n\t\treturn empty;\r\n\t}\r\n}\r\n\r\nvar empty = new SirenAction();\r\n\r\nexport default SirenAction;\r\n","import Immutable from 'immutable';\r\nimport Client from './Client';\r\n\r\nclass SirenLink extends Immutable.Record({\r\n\trels: new Immutable.Set(),\r\n\thref: null\r\n}) {\r\n\tconstructor(rels, href) {\r\n\t\tsuper({rels: new Immutable.Set(rels), href: href});\r\n\t}\r\n\r\n\t/**\r\n\t * Perhaps an HTTP Get against the href represented by this Link.\r\n\t *\r\n\t * @return {superagent-promise} superagent request as a with a promise wrapper\r\n\t */\r\n\tfollow() {\r\n\t\treturn Client.get(this.href);\r\n\t}\r\n}\r\n\r\nexport default SirenLink;\r\n"],"sourceRoot":"/source/"}